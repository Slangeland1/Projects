setView(lng = -71.0589,
lat = 42.3601,
zoom = 12)
m %>%
addProviderTiles(providers$Stamen.Toner)
m <- leaflet() %>%
setView(lng = -71.0589,
lat = 42.3601,
zoom = 12)
m %>%
addProviderTiles(providers$CartoDB.Positron)
m <- leaflet() %>%
setView(lng = -71.0589,
lat = 42.3601,
zoom = 12)
m %>%
addProviderTiles(providers$Stamen.Watercolor)
## Adding markers to map and changing icons:
data(quakes)
head(quakes)
## Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20, ]) %>%
addTiles() %>%
addMarkers(~long,
~lat,
popup = ~as.character(mag),
label = ~as.character(mag))
## Customizing marker icons:
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38,
iconHeight = 95,
iconAnchorX = 22,
iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50,
shadowHeight = 64,
shadowAnchorX = 4,
shadowAnchorY = 62
)
leaflet(data = quakes[1:4,]) %>%
addTiles() %>%
addMarkers(~long,
~lat,
icon = greenLeafIcon)
## Use the awesome icons repository of icons for markers first 20 quakes:
df.20 <- quakes[1:20, ]
## Use r code to create function that assigns colors depending on magnitude
## of earthquake.  Creates a vector of colors to use with awesome icons:
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
}
}
)
}
icons <- awesomeIcons(
icon = 'globe',
iconColor = 'black',
#spin=TRUE, ## only works with fa (i.e. font awesome)
library = 'fa', ## library argument has to be one of the following: ion, fa, or glyphicon corresponding icon libraries are ion,font awesome, and glyphicon.
markerColor = getColor(df.20)
)
leaflet(df.20) %>%
addTiles() %>%
addAwesomeMarkers(~long,
~lat,
icon = icons,
label = ~as.character(mag))
## More on circle markers:
df.25 <- df[1:25, ]
leaflet(df.25) %>%
addTiles() %>%
addCircleMarkers()
## Customize their color, radius, stroke, opacity, etc.
## Create a palette that maps factor levels to colors:
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
radius = ~size,
color = rep("red", 100),
stroke = FALSE,
fillOpacity = 0.25
)
## Pop up text and labels, use addPopups function to add standalone popup to a map:
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>%
addTiles() %>%
addPopups(-122.327298,
47.597131,
content,
options = popupOptions(closeButton = FALSE)
)
## More commonly we add popups to markers:
library(htmltools)
## Create data using comma separated lines:
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))
## Build map widget that shows restaurant name when user clicks marker:
leaflet(df) %>%
addTiles() %>%
addMarkers(~Long,
~Lat,
popup = ~htmlEscape(Name))
## Add labels (displayed when user hovers over marker):
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"))
leaflet(df) %>%
addTiles() %>%
addMarkers(~Long,
~Lat,
label = ~htmlEscape(Name))
## Customizing Marker Labels using addMarker labelOptions
## Change Text Size and text Only and also a custom CSS style
#notice the noHIde option:
leaflet() %>%
addTiles() %>%
setView(-118.456554, 34.09, 13) %>%
addMarkers(
lng = -118.456554,
lat = 34.105,
label = "Default Label",
labelOptions = labelOptions(noHide = T)) %>%
addMarkers(
lng = -118.456554,
lat = 34.095,
label = "Label w/o surrounding box",
labelOptions = labelOptions(noHide = T,
textOnly = TRUE)) %>%
addMarkers(
lng = -118.456554,
lat = 34.085,
label = "label w/ textsize 15px",
labelOptions = labelOptions(noHide = T,
textsize = "15px")) %>%
addMarkers(
lng = -118.456554,
lat = 34.075,
label = "Label w/ custom CSS style",
labelOptions = labelOptions(noHide = T,
direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)"
)))
## Leaflet with shp files:
library(rgdal)
tmp <- tempdir()
url <- "http://www2.census.gov/geo/tiger/GENZ2016/shp/cb_2016_us_state_20m.zip"
file <- basename(url)
download.file(url, file)
unzip(file, exdir = tmp)
## From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR(dsn = tmp,
layer = "cb_2016_us_state_20m",
GDAL1_integer64_policy = TRUE)
neStates <- subset(states,
states$STUSPS %in%
c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
m <- leaflet(neStates) %>%
addTiles() %>%
addPolygons(color = "#444444",
weight = 1,
smoothFactor = 0.5,
opacity = 1.0,
fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE))
m
## ADD LEGENDS TO MAP WIDGET:
leaflet(neStates) %>%
addTiles() %>%
addPolygons(color = "#444444",
weight = 1,
smoothFactor = 0.5,
opacity = 1.0,
fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE))%>%
addLegend("bottomright",
colors = "Orange",
labels = "Test label",
title = "North Eastern States")
## Chorepleth legend:
qpal <- colorQuantile("RdYlBu",
neStates@data$ALAND,
n = 5,
reverse = TRUE)
leaflet(neStates) %>%
addTiles() %>%
addPolygons(color = "#444444",
weight = 1,
smoothFactor = 0.5,
opacity = 1.0,
fillOpacity = 0.5,
fillColor = ~qpal(ALAND),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE))%>%
addLegend("bottomright",
pal = qpal,
values = ~ALAND,
opacity = 1)
## Advanced interactivity #1: layer manipulation within widget:
outline <- quakes[chull(quakes$long, quakes$lat), ] ## KEEP POINTS THAT DEFINE OUTLINE OF QUAKE POINTS
## Two layer options:
map <- leaflet(quakes) %>%
addTiles() %>%
addCircles(~long,
~lat,
~10 ^ mag / 5,
stroke = F,
group = "Quakes") %>% ## Overlay groups
addPolygons(data = outline,
lng = ~long,
lat = ~lat,
fill = T,
weight = 2,
color = "#FFFFCC",
group = "Outline") %>%   #Add a single polygon that outlines points to map
addLayersControl( ## Layers control
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
map
## Three basemap options and two layer options:
map <- leaflet(quakes) %>%
addTiles(group = "OSM (default)") %>% ## Base groups
addProviderTiles(providers$Stamen.Toner,
group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite,
group = "Toner Lite") %>%
addCircles(~ long,
~ lat,
~ 10 ^ mag / 5,
stroke = F,
group = "Quakes") %>%   ## Overlay groups
addPolygons(data = outline,
lng = ~ long,
lat = ~ lat,
fill = F,
weight = 2,
color = "#FFFFCC",
group = "Outline") %>%
addLayersControl( ## Layers control
baseGroups = c("OSM (default)",
"Toner",
"Toner Lite"),
overlayGroups = c("Quakes",
"Outline"),
options = layersControlOptions(collapsed = FALSE)
)
map
## Example of web application using leaflet with Shiny here:
## Example of web application using leaflet with Shiny here:
## http://shiny.rstudio.com/gallery/superzip-example.html
## Example of web application using leaflet with Shiny here:
## http://shiny.rstudio.com/gallery/superzip-example.html
## This is an example of what you will learn in the data visualization
base_url <- "https://api.stlouisfed.org/fred/series/observations?"
library(httr)
GDPC1_response <- GET(
base_url,
query = list(
"series_id" = "GDPC1", ## GDPC1 id number
"observation_start" = "1947-01-01", ## data start date
"observation_end" = "2017-01-01", ## data end date
"api_key" = Sys.getenv("FRED_API"),
"frequency" = "sa", ## semi-annual frequency
"file_type" = "json"
)
)
http_status(GDPC1_response)
http_type(GDPC1_response)
GDPC1_import <- content(GDPC1_response,
as = "text")
library(jsonlite)
GDPC1_data <- fromJSON(GDPC1_import,
simplifyDataFrame = TRUE)
str(GDPC1_data)
GDPC1_df <- as.data.frame(GDPC1_data)
dim(GDPC1_df)
GDPC1_df
View((`base_url`))
View(GDPC1_df)
## Prepare Data for Summary Statistics:
str(GDPC1_df)
GDPC1_df$realtime_start <- as.Date(GDPC1_df$realtime_start)
GDPC1_df$realtime_end <- as.Date(GDPC1_df$realtime_end)
GDPC1_df$observation_start <- as.Date(GDPC1_df$observation_start)
GDPC1_df$observation_end <- as.Date(GDPC1_df$observation_end)
GDPC1_df$observations.date <- as.Date(GDPC1_df$observations.date)
GDPC1_df$observations.value <- as.numeric(GDPC1_df$observations.value)
## Prepare Data for Summary Statistics:
str(GDPC1_df)
summary(GDPC1_df$observations.value)
library(ggplot2)
ggplot(data = GDPC1_df,
aes(x = observations.date,
y = observations.value,
fill = observations.value)) +
geom_bar(stat = "identity") +
geom_smooth(color = "#FF8888") +
ggtitle("U.S. Real Gross Domestic Product") +
xlab("Year") +
ylab("Real GDP (USD)")
GDPC1_df[ , c("observations.date", "observations.value")]
setwd("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/hw08")
saveRDS(GDPC1_df,
file = "data.RDS")
read("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/hw08/data.RDS")
readRDS("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/hw08/data.RDS")
get_series_obs <- function(series_id,
observation_start = "1947-01-01", ## default value
observation_end = "2017-11-06",  ## default value
user_api,
frequency,
name_rds
) {
start_url <- "https://api.stlouisfed.org/fred/series/observations?"
response <- GET(
start_url,
query = list(
"series_id" = series_id,
"observation_start" = observation_start,
"observation_end" = observation_end,
"api_key" = user_api,
"frequency" = frequency,
"file_type" = "json"
)
)
output <- if(http_error(response) == TRUE){
http_error(response)
} else {
content(response,
as = "text")
}
dataset <- jsonlite::fromJSON(output,
simplifyDataFrame = TRUE)
save_rds <- saveRDS(dataset,
file = name_rds)
dataset
}
get_series_obs(
series_id = "GDPC1",
observation_start = "2011-01-01",
observation_end = "2017-01-01",
user_api = Sys.getenv("FRED_API"),
frequency = "a",
name_rds = "api_client_output.RDS"
)
get_series_obs(
series_id = "GDPC1",
#observation_start = "2011-01-01",
#observation_end = "2017-01-01",
user_api = Sys.getenv("FRED_API"),
frequency = "a",
name_rds = "api_client_output.RDS"
)
get_series_obs <- function(series_id,
observation_start = "1947-01-01", ## default value
observation_end = "2017-11-06",  ## default value
user_api,
frequency,
name_rds = "api_client_output.RDS"
) {
start_url <- "https://api.stlouisfed.org/fred/series/observations?"
response <- GET(
start_url,
query = list(
"series_id" = series_id,
"observation_start" = observation_start,
"observation_end" = observation_end,
"api_key" = user_api,
"frequency" = frequency,
"file_type" = "json"
)
)
output <- if(http_error(response) == TRUE){
http_error(response)
} else {
content(response,
as = "text")
}
dataset <- jsonlite::fromJSON(output,
simplifyDataFrame = TRUE)
save_rds <- saveRDS(dataset,
file = name_rds)
dataset
}
## To demonstrate that the default values work:
get_series_obs(
series_id = "GDPC1",
user_api = Sys.getenv("FRED_API"),
frequency = "a"
)
readRDS("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/hw08/api_client_output.RDS")
## To demonstrate a more specific query that does not rely on default values:
get_series_obs(
series_id = "GDPC1",
observation_start = "2011-01-01",
observation_end = "2017-01-01",
user_api = Sys.getenv("FRED_API"),
frequency = "a",
name_rds = "api_client_output_example2.RDS"
)
readRDS("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/hw08/api_client_output_example2.RDS")
get_series_obs <- function(series_id,
observation_start = "1947-01-01", ## default value
observation_end = "2017-11-06",  ## default value
user_api,
frequency = "sa",
name_rds = "api_client_output.RDS"
) {
start_url <- "https://api.stlouisfed.org/fred/series/observations?"
response <- GET(
start_url,
query = list(
"series_id" = series_id,
"observation_start" = observation_start,
"observation_end" = observation_end,
"api_key" = user_api,
"frequency" = frequency,
"file_type" = "json"
)
)
output <- if(http_error(response) == TRUE){
http_error(response)
} else {
content(response,
as = "text")
}
dataset <- jsonlite::fromJSON(output,
simplifyDataFrame = TRUE)
save_rds <- saveRDS(dataset,
file = name_rds)
dataset
}
library(httr)
library(jsonlite)
get_series_obs <- function(series_id,
observation_start = "1947-01-01", ## default value
observation_end = "2017-11-06",  ## default value
user_api,
frequency = "sa",
name_rds = "api_client_output.RDS"
) {
start_url <- "https://api.stlouisfed.org/fred/series/observations?"
response <- GET(
start_url,
query = list(
"series_id" = series_id,
"observation_start" = observation_start,
"observation_end" = observation_end,
"api_key" = user_api,
"frequency" = frequency,
"file_type" = "json"
)
)
output <- if(http_error(response) == TRUE){
http_error(response)
} else {
content(response,
as = "text")
}
dataset <- jsonlite::fromJSON(output,
simplifyDataFrame = TRUE)
save_rds <- saveRDS(dataset,
file = name_rds)
dataset
}
## To demonstrate that the default values work:
get_series_obs(
series_id = "GDPC1",
user_api = Sys.getenv("FRED_API")
)
## To demonstrate a more specific query that does not rely on default values:
get_series_obs(
series_id = "GDPC1",
observation_start = "2011-01-01",
observation_end = "2017-01-01",
user_api = Sys.getenv("FRED_API"),
frequency = "a",
name_rds = "api_client_output_example2.RDS"
)
