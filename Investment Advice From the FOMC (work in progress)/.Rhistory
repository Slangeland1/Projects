get_historical_dates <- function(x = TRUE) {
year <- x
historical_url <- paste0(
"https://www.federalreserve.gov/monetarypolicy/fomchistorical",
year,
".htm"
)
historical_import <- GET(historical_url)
historical_content <- content(historical_import,
as = "parsed")
historical_page <- read_html(
historical_url
)
historical_nodes <- html_nodes(
historical_page,
"h5"
)
historical_text <- html_text(historical_nodes)
historical_text_table <- as.data.frame(historical_text)
historical_text_table
}
document()
?get_historical_dates
#'@title  Obtain Historical FOMC Meeting Dates
#'
#'@description  This function creates a data frame that lists the FOMC meeting
#'dates that are listed in the "FOMC historical section" of the Federal Reserve's
#'("FED") website.  At the time this function was created, FOMC meeting dates from
#'1936 - 2011 were available using the link embedded in this function. PLEASE NOTE
#'THAT THIS FUNCTION WAS CREATED ON 2017-11-22.  THEREFORE, THIS FUNCTION MAY BECOME
#'OBSOLETE IF THE FED CHANGES THE WEBSITE CONFIGURATION AFTER 2017-11-22 AS THIS FUNCTION
#'USES WEB SCRAPPING TECHNIQUES.
#'
#' @param x The year ("YYYY" format with quotes) for which the user wants to obtain
#' FOMC meeting dates.  This defaults to TRUE.
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' ## Example 1: Use this function to obtain one year of data:
#' get_historical_dates("1937")
#'
#' ## Example 2: Using this function in a for loop to obtain multiple
#' ## years of data and store it in a data frame:
#'
#' meeting_dates  <- NULL ## step 1: create empty data frame to store dates
#'
#' for (i in seq(1995, 2011)) { ## step 2: get all meeting dates from 1995-2011
#' tmp <- get_historical_dates(i) ## create temporary file
#' meeting_dates <- rbind(meeting_dates, tmp) ## create a data frame named "meeting_dates"
#' }
#'
#' View(meeting_dates) ## step 3: View the "meeting_dates" data frame
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
get_historical_dates <- function(x = TRUE) {
year <- x
historical_url <- paste0(
"https://www.federalreserve.gov/monetarypolicy/fomchistorical",
year,
".htm"
)
historical_import <- GET(historical_url)
historical_content <- content(historical_import,
as = "parsed")
historical_page <- read_html(
historical_url
)
historical_nodes <- html_nodes(
historical_page,
"h5"
)
historical_text <- html_text(historical_nodes)
historical_text_table <- as.data.frame(historical_text)
historical_text_table
}
document()
check()
#'@title  Obtain data using a FRED API call
#'
#'@description  This function uses a FRED API key to obtain economic and financial
#'data from https://research.stlouisfed.org/docs/api/fred/series_observations.html.
#'There are other packages that have functions that can also obtain these data.
#'This function was included in this package for completeness purposes so
#'another user can re-perform this project.
#'
#' @param series_id The series ID number assigned to data by FRED (format: the ID
#' must be in quotes).  Obtain the ID number of a data point from FRED.  There is
#' no default, the user must set this parameter.
#'
#' @param observation_start The start date of the data (format: "YYYY-MM-DD" must
#' be in quotes).  This defaults to "1947-01-01".
#'
#' @param observation_end The end date of the data (format: "YYYY-MM-DD" must be
#' in quotes).  This defaults to "2017-11-06".
#'
#' @param user_api The user's FRED API key (format: must be in quotes).  There
#' is no default, the user must set this parameter.
#'
#' @param frequency The frequency of the data e.g, "a" for annual, "sa" for
#' semi-annual, etc. (format: must be in quotes).  This defaults to "sa" (semi-annual).
#'
#' @param name_rds The output from this function will be saved in an RDS file.
#' This parameter is the name of the RDS file (format: must be in quotes).
#' This defaults to "api_client_output.RDS".
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' get_series_obs(series_id = "DFEDTAR", ## ID number for the Federal Funds Target Rate
#' (details: https://fred.stlouisfed.org/series/DFEDTAR)
#' observation_start = "1995-01-01", ## start date
#' observation_end = "2008-12-15", ## end date
#' user_api = "INSERT API KEY HERE", ## insert the user's API key
#' (details: https://research.stlouisfed.org/docs/api/api_key.html)
#' frequency = "d", ## daily frequency
#' name_rds = "Federal_Funds_Target_Rate.rds" ## name of output file
#' )
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
get_series_obs <- function(series_id,
observation_start = "1947-01-01",
observation_end = "2017-11-06",
user_api,
frequency = "sa",
name_rds = "api_client_output.RDS"
) {
start_url <- "https://api.stlouisfed.org/fred/series/observations?"
response <- GET(
start_url,
query = list(
"series_id" = series_id,
"observation_start" = observation_start,
"observation_end" = observation_end,
"api_key" = user_api,
"frequency" = frequency,
"file_type" = "json"
)
)
output <- if(http_error(response) == TRUE){
http_error(response)
} else {
content(response,
as = "text")
}
dataset <- jsonlite::fromJSON(output,
simplifyDataFrame = TRUE)
save_rds <- saveRDS(dataset,
file = name_rds)
dataset
}
document()
?get_series_obs
#'@title  Obtain Data Using a FRED API Call
#'
#'@description  This function uses a FRED API key to obtain economic and financial
#'data from https://research.stlouisfed.org/docs/api/fred/series_observations.html.
#'There are other packages that have functions that can also obtain these data.
#'This function was included in this package for completeness purposes so
#'another user can re-perform this project.
#'
#' @param series_id The series ID number assigned to data by FRED (format: the ID
#' must be in quotes).  Obtain the ID number of a data point from FRED.  There is
#' no default, the user must set this parameter.
#'
#' @param observation_start The start date of the data (format: "YYYY-MM-DD" must
#' be in quotes).  This defaults to "1947-01-01".
#'
#' @param observation_end The end date of the data (format: "YYYY-MM-DD" must be
#' in quotes).  This defaults to "2017-11-06".
#'
#' @param user_api The user's FRED API key (format: must be in quotes).  There
#' is no default, the user must set this parameter.
#'
#' @param frequency The frequency of the data e.g, "a" for annual, "sa" for
#' semi-annual, etc. (format: must be in quotes).  This defaults to "sa" (semi-annual).
#'
#' @param name_rds The output from this function will be saved in an RDS file.
#' This parameter is the name of the RDS file (format: must be in quotes).
#' This defaults to "api_client_output.RDS".
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' get_series_obs(series_id = "DFEDTAR", ## ID number for the Federal Funds Target Rate
#' (details: https://fred.stlouisfed.org/series/DFEDTAR)
#' observation_start = "1995-01-01", ## start date
#' observation_end = "2008-12-15", ## end date
#' user_api = "INSERT API KEY HERE", ## insert the user's API key
#' (details: https://research.stlouisfed.org/docs/api/api_key.html)
#' frequency = "d", ## daily frequency
#' name_rds = "Federal_Funds_Target_Rate.rds" ## name of output file
#' )
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
get_series_obs <- function(series_id,
observation_start = "1947-01-01",
observation_end = "2017-11-06",
user_api,
frequency = "sa",
name_rds = "api_client_output.RDS"
) {
start_url <- "https://api.stlouisfed.org/fred/series/observations?"
response <- GET(
start_url,
query = list(
"series_id" = series_id,
"observation_start" = observation_start,
"observation_end" = observation_end,
"api_key" = user_api,
"frequency" = frequency,
"file_type" = "json"
)
)
output <- if(http_error(response) == TRUE){
http_error(response)
} else {
content(response,
as = "text")
}
dataset <- jsonlite::fromJSON(output,
simplifyDataFrame = TRUE)
save_rds <- saveRDS(dataset,
file = name_rds)
dataset
}
document()
?get_series_obs
check()
#'@title  Create a Historical Quate Data Yahoo Finance URL
#'
#'@description  This function creates a Yahoo Finance URL to access historical
#'quote data.  PLEASE NOTE THAT THIS FUNCTION WAS CREATED ON 2017-11-22.
#'THEREFORE, THIS FUNCTION MAY BECOME OBSOLETE IF YAHOO FINANCE CHANGES THE
#'WEBSITE CONFIGURATION AFTER 2017-11-22.
#'
#' @param start_date The start date of the data (format: "YYYY-MM-DD" must be
#' in quotes).  There is no default, the user must set this parameter.
#'
#' @param end_date The end date of the data (format: "YYYY-MM-DD" must be in
#' quotes).  This parameter defaults to tomorrow's date in order to ensure
#' that the most recent data are loaded.
#'
#' @param ticker The ticker/symbol of the data (format: must be in quotes).
#' There is no default, the user must set this parameter.
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' final_url <- get_yf_url(
#' start_date = "1995-01-13",
#' end_date = "2017-12-02",
#' ticker = "%5EVIX" ## ticker is the "^VIX" - the ^ symbol must be converted to "%5E"
#' )
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
get_yf_url <- function(start_date,
end_date = (Sys.Date() + 1),
ticker
) {
start_date <- as.numeric(
as.POSIXct(
start_date
)
)
end_date <- as.numeric(
as.POSIXct(
end_date
)
)
ticker <- ticker
url <- paste0(
"https://finance.yahoo.com/quote/",
ticker,
"/history?period1=",
start_date,
"&period2=",
end_date,
"&interval=1d&filter=history&frequency=1d"
)
print(url)
}
document()
?get_yf_url
#' \dontrun{
#' final_url <- get_yf_url(
#' start_date = "1995-01-13",
#' end_date = "2017-12-02",
#' ticker = "%5EVIX" ## ticker is the "^VIX" - the ^ symbol must be converted to "%5E"
#' )
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
get_yf_url <- function(start_date,
end_date = (Sys.Date() + 1),
ticker
) {
start_date <- as.numeric(
as.POSIXct(
start_date
)
)
end_date <- as.numeric(
as.POSIXct(
end_date
)
)
ticker <- ticker
url <- paste0(
"https://finance.yahoo.com/quote/",
ticker,
"/history?period1=",
start_date,
"&period2=",
end_date,
"&interval=1d&filter=history&frequency=1d"
)
print(url)
}
document()
?get_yf_url
checl()
check()
#'@title  Parse Yahoo Finance Data
#'
#'@description  This function parses the data obtained from web scrapping
#'historical quote Yahoo Finance data.  The output is saved in a data frame.
#'Please follow the steps in the vignette to understand at what
#'point to use this function.  PLEASE NOTE THAT THIS FUNCTION WAS
#'CREATED ON 2017-11-22.  THEREFORE, THIS FUNCTION MAY BECOME
#'OBSOLETE IF YAHOO FINANCE CHANGES THE WEBSITE CONFIGURATION AFTER
#'2017-11-22 AS THIS FUNCTION USES WEB SCRAPPING TECHNIQUES.
#'
#' @param set_page_source The object name of the page source obtained
#' by using the RSelenium function "getPageSource()".  There is no
#' default for this parameter, the user must take the preceeding
#' steps outlined in the vignette to understand how to create this
#' object.
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' parse_yf(set_page_source = page_source)
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
parse_yf <- function(set_page_source) {
page_source <- set_page_source[[1]]
data_page <- read_html(page_source)
data_nodes <- html_nodes(data_page,
"table")
html_text(data_nodes)
data_table <- html_table(data_nodes)
final_df <- as.data.frame(data_table)
final_df
}
document()
?parse_yf
check()
#'@title  Scroll Down Historical Quote Data Yahoo Finance Page
#'
#'@description  This function scrolls down a yahoo finance historical quote
#'data page in order to load the data since Yahoo Finance only loads the
#'data that is seen by the user on the screen i.e. the user must scroll
#'down to view all data because more data loads as the user scrolls down.
#'Please follow the steps in the vignette to understand how or at what
#'point to use this function.  PLEASE NOTE THAT THIS FUNCTION WAS
#'CREATED ON 2017-11-22.  THEREFORE, THIS FUNCTION MAY BECOME
#'OBSOLETE IF YAHOO FINANCE CHANGES THE WEBSITE CONFIGURATION AFTER
#'2017-11-22 AS THIS FUNCTION USES WEB SCRAPPING TECHNIQUES.
#'
#' @param x The number times the user wants to scroll down the page.
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' scroll_yf(60) ## scrolls down 60 times
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
scroll_yf <- function(x) {
for(i in 1:x) {
remDr$executeScript(
paste(
"scroll(0,",
i * 10000,
");"
),
args = list("dummy")
)
Sys.sleep(3)
}
}
document()
?scroll_yf
#'@title  Scroll Down Historical Quote Data Yahoo Finance Page
#'
#'@description  This function scrolls down a yahoo finance historical quote
#'data page in order to load the data since Yahoo Finance only loads the
#'data that is seen by the user on the screen i.e. the user must scroll
#'down to view all data because more data loads as the user scrolls down.
#'Please follow the steps in the vignette to understand at what
#'point to use this function.  PLEASE NOTE THAT THIS FUNCTION WAS
#'CREATED ON 2017-11-22.  THEREFORE, THIS FUNCTION MAY BECOME
#'OBSOLETE IF YAHOO FINANCE CHANGES THE WEBSITE CONFIGURATION AFTER
#'2017-11-22 AS THIS FUNCTION USES WEB SCRAPPING TECHNIQUES.
#'
#' @param x The number times the user wants to scroll down the page.
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' scroll_yf(60) ## scrolls down 60 times
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
scroll_yf <- function(x) {
for(i in 1:x) {
remDr$executeScript(
paste(
"scroll(0,",
i * 10000,
");"
),
args = list("dummy")
)
Sys.sleep(3)
}
}
document()
?scroll_yf
#'@title  Scroll Down Historical Quote Data Yahoo Finance Page
#'
#'@description  This function scrolls down a yahoo finance historical quote
#'data page in order to load the data since Yahoo Finance only loads the
#'data that is seen by the user on the screen i.e. the user must scroll
#'down to view all data because more data loads as the user scrolls down.
#'Please follow the steps in the vignette to understand at what
#'point to use this function.  PLEASE NOTE THAT THIS FUNCTION WAS
#'CREATED ON 2017-11-22.  THEREFORE, THIS FUNCTION MAY BECOME
#'OBSOLETE IF YAHOO FINANCE CHANGES THE WEBSITE CONFIGURATION AFTER
#'2017-11-22 AS THIS FUNCTION USES WEB SCRAPPING TECHNIQUES.
#'
#' @param x The number times the user will scroll down the page.
#'
#' @keywords EconFiData
#'
#' @export
#'
#' @examples
#' \dontrun{
#' scroll_yf(60) ## scrolls down 60 times
#' }
#'
#' @author Stephanie Langeland stephanie.langeland@gmail.com
#'
scroll_yf <- function(x) {
for(i in 1:x) {
remDr$executeScript(
paste(
"scroll(0,",
i * 10000,
");"
),
args = list("dummy")
)
Sys.sleep(3)
}
}
docuem
document()
?scroll_yf
check()
devtools::use_vignette("get_series_obs_vignette")
devtools::use_vignette("all_yf_functions_vignette")
```{r, eval = FALSE}
setwd("..")
install("EconFiData")
library(EconFiData)
