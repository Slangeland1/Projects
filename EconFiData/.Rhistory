)
legend_details <- list(
x = 1.09,
y = 1
)
font_details <- list(
family = "times new roman",
size = 12,
color = 'black')
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details)
chart3
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details,
title = list(x = 0))
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details,
title = list(x = 0,
y = 1))
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details,
title = list(x = 0,
y = 0))
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details,
title = list(xanchor = "top"))
"Elevated Volatiltiy",
"Negative Rate Change",
"Neutral Volatility",
"No Rate Change",
"Positive Rate Change",
"Subdued Volatility"),
values = c(
chart3
chart3 <- chart2 %+%
ggtitle("Daily Change in the VIX & Target Federal Funds Rate Decision on Day Two of the FOMC Meeting") +
scale_color_manual(
name = "                                  Legend",
labels = c(
"Elevated Volatiltiy",
"Negative Rate Change",
"Neutral Volatility",
"No Rate Change",
"Positive Rate Change",
"Subdued Volatility"),
values = c(
"red2",
"orangered",
"tan2",
"yellow2",
"green3",
"chartreuse4"
)) +
opts(plot.title = element_text(hjust = 0))
title = list(textposition = "top left")
legend_details <- list(
x = 1.09,
y = 1
)
font_details <- list(
family = "times new roman",
size = 12,
color = 'black')
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details)
title_details = list(textposition = "top left")
legend_details <- list(
x = 1.09,
y = 1
)
font_details <- list(
family = "times new roman",
size = 12,
color = 'black')
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details,
title = title_details)
title_details = list(text = "thing",
textposition = "top left")
legend_details <- list(
x = 1.09,
y = 1
)
font_details <- list(
family = "times new roman",
size = 12,
color = 'black')
ggplotly(chart3,
tooltip = c("text")
) %>%
layout(yaxis2 = Y2,
legend = legend_details,
margin = list(r = 150),
font = font_details,
title = title_details)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
setwd(path)
library(EconFiData)
check()
library(EconFiData)
setwd("..")
install("EconFiData")
install("EconFiData")
library(EconFiData)
meeting_dates  <- NULL ## create empty data frame
for (i in seq(1995, 2011)) {
tmp <- get_historical_dates(i)
meeting_dates <- rbind(meeting_dates, tmp)
} ## get all meeting dates from 1995-2011
usethis::use_package("httr")
usethis::use_package("rvest")
usethis::use_package("jsonlite")
usethis::use_package("RSelenium")
usethis::use_package("XML")
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
setwd(path)
usethis::use_package("httr")
usethis::use_package("rvest")
usethis::use_package("jsonlite")
usethis::use_package("RSelenium")
usethis::use_package("XML")
library(EconFiData)
for (i in seq(1995, 2011)) {
tmp <- get_historical_dates(i)
meeting_dates <- rbind(meeting_dates, tmp)
} ## get all meeting dates from 1995-2011
library(httr)
library(rvest)
for (i in seq(1995, 2011)) {
tmp <- get_historical_dates(i)
meeting_dates <- rbind(meeting_dates, tmp)
} ## get all meeting dates from 1995-2011
View(meeting_Dates)
View(meeting_dates)
library(httr)
library(rvest)
library(EconFiData)
meeting_dates  <- NULL ## create empty data frame
for (i in seq(1995, 2011)) {
tmp <- get_historical_dates(i)
meeting_dates <- rbind(meeting_dates, tmp)
} ## get all meeting dates from 1995-2011
head(meeting_dates)
str(meeting_dates)
?get_historical_dates
get_historical_dates("1937")
library(httr)
library(EconFiData)
library(httr)
library(jsonlite)
Federal_Funds_Target_Rate <-  get_series_obs(series_id = "DFEDTAR",
observation_start = "1995-01-01",
observation_end = "2008-12-15",
user_api = Sys.getenv("FRED_API"),
frequency = "d",
name_rds = "Federal_Funds_Target_Rate.rds"
)
getwd()
target_data <- get_series_obs(series_id = "DFEDTAR",
observation_start = "1995-01-01",
observation_end = "2008-12-15",
user_api = Sys.getenv("FRED_API"),
frequency = "d",
name_rds = "Federal_Funds_Target_Rate.rds"
)
View(target_data)
head(target_data)
str(target_data)
setwd("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData/vignettes/temp_files/")
target_data <- get_series_obs(series_id = "DFEDTAR",
observation_start = "1995-01-01",
observation_end = "2008-12-15",
user_api = Sys.getenv("FRED_API"),
frequency = "d",
name_rds = "Federal_Funds_Target_Rate.rds"
)
head(target_data)
str(target_data)
setwd("/Users/StephanieLangeland/Desktop/")
target_data <- get_series_obs(series_id = "DFEDTAR",
observation_start = "1995-01-01",
observation_end = "2008-12-15",
user_api = Sys.getenv("FRED_API"),
frequency = "d",
name_rds = "Federal_Funds_Target_Rate.rds"
)
head(target_data)
str(target_data)
setwd("/Users/StephanieLangeland/Desktop/")
target_data <- get_series_obs(series_id = "DFEDTAR",
observation_start = "1995-01-01",
observation_end = "2008-12-15",
user_api = Sys.getenv("FRED_API"),
frequency = "d",
name_rds = "Federal_Funds_Target_Rate.rds"
)
head(target_data)
str(target_data)
head(target_data)
str(target_data)
target_data_df <- as.data.frame(target_data$observations)
View(target_data_df)
colnames(target_data_df)[4] <- "Federal_Funds_Target_Rate"
target_data_df <- target_data_df[ c("date",
"Federal_Funds_Target_Rate")]
head(target_data)
head(target_data_df)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "1995-01-13",
end_date = "2017-12-02",
ticker = "%5EVIX")
setwdgetwd()
getwd()
FOMC_dates <- readRDS("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/FOMC_meeting_dates.rds") ## retrieve first FOMC statement release date
FOMC_dates[1, 1] ## get first FOMC policy statement release date
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "1995-01-13",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
scroll_yf(60)
scroll1
scroll_yf(1)
page_source <- remDr$getPageSource() ## step 13: get the page html
library(XML)
parse_yf <- function(set_page_source) {
page_source <- set_page_source[[1]]
data_page <- read_html(page_source) ## step 14: parse it
data_nodes <- html_nodes(data_page, ## step 15: get html nodes for css "table"
"table")
html_text(data_nodes) ## step 16: verify all data are returned
data_table <- html_table(data_nodes) ## step 17: convert css table to html_table
final_df <- as.data.frame(data_table) ## step 18: convert to data frame
final_df
}
vix_data <- parse_yf(set_page_source = page_source)
View(vix_data)
str(vix_data)
vix_data <- clean_yf_data(final_df = vix_data,
set_column_names = "vix",
wd = "/Users/StephanieLangeland/Desktop/",
RDSfilename = "VIX")
View(vix_data)
FOMC_dates <- readRDS("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/FOMC_meeting_dates.rds") ## retrieve first FOMC statement release date
FOMC_dates[1, 1] ## get first FOMC policy statement release date
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "1995-01-13",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
## step 12: scroll down to bottom of page x times with 3 seconds of loading time:
scroll_yf(60)
FOMC_dates <- readRDS("/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/FOMC_meeting_dates.rds") ## retrieve first FOMC statement release date
FOMC_dates[1, 1] ## get first FOMC policy statement release date
library(rvest)
library(EconFiData)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "1995-01-13",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
setwd(path)
library(EconFiData)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "1995-01-13",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
## step 12: scroll down to bottom of page x times with 3 seconds of loading time:
scroll_yf(60)
## step 12: scroll down to bottom of page 60 times with 3 seconds of loading time:
scroll_yf(60)
page_source <- remDr$getPageSource() ## step 13: get the page html
## step 12: scroll down to bottom of page 60 times with 3 seconds of loading time:
scroll_yf(60)
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
## step 12: scroll down to bottom of page 60 times with 3 seconds of loading time:
scroll_yf(60)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2016-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
final_url
## step 12: scroll down to bottom of page 5 times with 3 seconds of loading time:
scroll_yf(5)
page_source <- remDr$getPageSource() ## step 13: get the page html
library(XML)
vix_data <- parse_yf(set_page_source = page_source)
head(vix_data)
str(vix_data)
vix_data <- clean_yf_data(final_df = vix_data,
set_column_names = "vix",
wd = "/Users/StephanieLangeland/Desktop/",
RDSfilename = "VIX")
head(vix_data)
str(vix_data)
View(vix_data)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2016-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2016-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2016-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2017-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
setwd(path)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2017-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
remDr <- remoteDriver(remoteServerAddr = "localhost", ## step 8: establish server connection
port = 4445L,
browserName = "chrome")
remDr$open() ## step 9: connect to  Selenium server web driver
remDr$navigate(final_url) ## step 10: navigate to desired webpage
remDr$getTitle() ## step 11: check title to verify that the correct webpage loaded
## step 12: scroll down to bottom of page 5 times with 3 seconds of loading time:
scroll_yf(5)
library(rvest)
library(EconFiData)
final_url <- get_yf_url(start_date = "2017-01-01",
end_date = "2017-12-02",
ticker = "%5EVIX")
library(RSelenium)
setwd("/Users/StephanieLangeland") ## step 6: this folder contains the chrone web driver
system('docker run -d -p 4445:4444 selenium/standalone-chrome') ## step 7
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
setwd(path)
library(EconFiData)
setwd(path)
library(EconFiData)
check()
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
setwd(path)
library(EconFiData)
check()
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData"
check()
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData/"
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData/"
library(EconFiData)
check()
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData/"
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData/"
setwd(path)
setwd(path)
library(EconFiData)
library(roxygen2)
library(devtools)
library(testthat)
path <- "/Users/StephanieLangeland/Desktop/Columbia/Modern Data Structures/Langeland_Stephanie/final project/EconFiData/"
